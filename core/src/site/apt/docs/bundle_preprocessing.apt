																		------
                                    Bundle preprocessing
                                    ------
                                    ------
                                    ------

Bundle preprocessing

	One of the key features of Jawr is its ability to bundle resources.
	The process of bundling involves the following steps:
	
		* Resolve the bundle mapping definition
		
		* Aggregate resources
		
		* Minify them
		
		* Apply custom post processors
		
		* Generate GZIP and non GZIP version
		
	By default, this process is done at server startup.
	This bundling process could take some times, when the application contains a large number of bundles.
	
	Since Jawr 3.0, we have added a feature to preprocess the Jawr bundles.
	The bundle preprocessing is almost the same as the standard processing, except that it could be done during a build.
	
	We have added 2 properties:
	
		* <<jawr.use.bundle.mapping>> : This flag indicates if during the server startup we should use the data of the preprocessed bundles 
		instead of performing the bundling process. The preprocessed bundles will be found in the Jawr working directory. (See below) 
	
		* <<jawr.working.directory>> : This property defines where the jawr working directory is. 
		By default, it's jawrTmp in the web application working directory. 
	
* Use bundle mapping property
	
	When the property <<jawr.use.bundle.mapping>> is set to true, Jawr will try to use specific files, which are containing all the data about the bundles 
	(Full mapping paths, bundle hash code ...). 
	These files are searched in the working directory (jawrWrkDir/jawr-(js/css/img)-mapping.properties ).
	If these files are not found, Jawr will create them in the working directory.

	So if you have this property set to true, and you start a fresh application with an empty working directory, 
	the first time, Jawr will process the bundle normally and it will create the mapping files.
	Then the next time, when you restart your application, Jawr will use the mappings files and skip the bundling process,
	this will make the startup time of the web application faster.
 	 	
* Jawr working directory

	We have added the option to define explicitly the location the working directory.
	By default the working directory is set in <<webAppWrkDir>>/jawrTmp/

	The user could define the working directory location somewhere else on the file system using a value, which is prefixed by <<file://>>. 
	For example: 

+------------------------------------------+	
	jawr.working.directory=file://D:/temp/jawr/
+------------------------------------------+

	The user could also define the working directory inside the web application itself.
	In that case, the value should be a relative path from the web application root directory.
	For example: 
	
+------------------------------------------+
	jawr.working.directory=/jawrContent/
+------------------------------------------+

	But in that case, Jawr will not be able to create the temporary files in the web application.
	So this means that the user will have to create the temporary files, and put them in the web application.
	
		
* Bundle Processor

	This class is responsible of preprocessing the bundles, creating the Jawr working directory and the CDN directory.
	
	In the working directory, you will have the content of Jawr working directory generated by Jawr.
	
	In the CDN directory, you will have all the data for the CDN. 
	
	An Ant task and a maven plugin have been created to make it easy the integration in the build process.
	For more information about the usage, please check the documentation for {{{./jawr_maven_plugin.html} the maven plugin}} and {{{./jawr_ant_task.html} the Ant task}}. 
	
	
	To implement this feature, we have decided to simulate the server startup.
	
	This means that we are faking the application server startup:
		
		* We read the web.xml file
		 
		* We initialize the servlets
		
		* Then we launch the bundling process.    
	
	The main method of the bundle processor is the <<process>> method. This method takes 5 parameters:
	
		* <<baseDirPath>> the web application base directory path

		* <<tmpDirPath>> the temporary directory path
	 	
		* <<destDirPath>> the destination directory path, where the result will be stored
	 	
		* <<servletsToInitialize>> the list of comma separated names of servlets to initialize
	 	
		* <<generateCdnFiles>> the flag indicating if we should generate the CDN files or not
	
** Limitations
	
	As we have seen, the bundle preprocessing has almost the same behaviour as the standard bundle processing.
	To implement this feature, we have decided to simulate the server startup.
	By default we will only initialize the Jawr servlets.
	You could add in the <<servletsToInitialize>> the list of servlets to initialize.
	
	As said above, we only fake a server startup, which means that we don't initialize the entire web application context (filters, servlets ...).
	This could be a problem if you are initializing things, in the standard server startup, which you are used later in Jawr.
	These elements could be missing. 
	This is why we have added the parameter <<servletsToInitialize>> to be able to initialize other servlets, which you could initialize data used later by Jawr.
	
	
* CDN support

	One of the goals of this feature is to provide a better support for CDN.
	In the CDN directory, generated by the BundleProcessor, you will find all the bundles which are accessible in production and in debug modes.
	
	To define the URL which will contain the Jawr bundles on the CDN, you must specify the context path, which should be used like below:
	
+------------------------------------------+
	jawr.url.contextpath.override=http://myCDN.com/myApplication
	jawr.url.contextpath.ssl.override=https://myCDN.com/myApplication
+------------------------------------------+
	
	It is also possible to use the resources files from the CDN even in debug mode using:
	
+------------------------------------------+
	jawr.url.contextpath.override.used.in.debug.mode=true
+------------------------------------------+

** Apache support
	
	The bundle processor generates also a configuration file, containing the rewrite settings for the httpd.conf file of apache.
	This file named <<jawr-apache-httpd.conf>> is generated in the <<CDN>> folder.
		
* Limitations
	
	As explained above, the bundle preprocessing use the predefined mapping described in the full mapping files.
	This means that in debug mode, if you update a resource file, which is already part of a bundle, the change will be taken in account.
	
	<<BUT>> if you add a new resource file to a bundle mapping, this resource file will never been taken in account, unless you clean your working directory and
	start again your application.
	  	
	Note also that, you could switch from debug mode to production mode, without launching the bundling process, 
	but you have to keep in mind that the production bundles are the one which have been processed during the bundling phase.
	This means that if you have modified a resource file, since the latest bundling process, you will have to launch again the bundling process
	to have this updated resource file in your production bundle.  
	

	
	