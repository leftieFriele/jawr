<document>

  <properties>
    <title>More than a Javascript/CSS compressor</title>
  </properties>
	
	<head>
		<style>
			h2{display:none}
			#firstPara{
				clear:right;
				margin-top:100px
			}
			#mainJawrLogo {
				border:0 !important;
				margin:auto 0 auto;
				float:left;
			}
			#jawrlinks {
				float:right;
				width:45%;
				text-align:right;
				margin-right:-20px;
			}
			#jawrlinks img {
				margin-bottom:10px;
			}
			#badges{
				float:right;
				clear:right;
			}
			#badges img  { border:0 !important;}
		</style>
	</head>
	
  <body>
	
    <section>
	
	<img src="./images/index/logo.png" style="border:0 !important" id="mainJawrLogo"  />
	
	<div id="jawrlinks">
		<b>Latest version : 3.3</b><br/>
		<a href="https://jawr.dev.java.net/servlets/ProjectDocumentList?folderID=8543">
			<img src="./images/index/download.png" style="border:0 !important" title="Download the latest version of Jawr"  /></a> 
		<a href="https://jawr.dev.java.net/tutorials/quickstart.html" >
			<img src="./images/index/get-started.png" style="border:0 !important" title="Go to the quickstart tutorial and start using Jawr" /></a> 		
	</div>
	<div id="badges">
		<!-- FURL -->
	<a href="http://www.furl.net/storeIt.jsp?t=JAWR%20-%20More%20than%20a%20javascript/css%20compressor&amp;u=https://jawr.dev.java.net" target="_blank"><img border="0" src="/images/badges/furl.png" alt="add to furl"/></a>  
	
	<!-- DEL.ICIO.US -->
	<a href="http://del.icio.us/post?v=4&amp;noui&amp;jump=close&amp;url=https://jawr.dev.java.net&amp;title=JAWR%20-%20More%20than%20a%20javascript/css%20compressor" target="_blank"><img border="0" src="/images/badges/delicious.png" alt="add to del.icio.us"/></a>  
	
	<!-- TECHNORATI -->
	<a href="http://technorati.com/faves?add=https://jawr.dev.java.net" target="_blank"><img border="0" src="/images/badges/technorati.png" alt="add to technorati"/></a>  
	
	<!-- BLINKLIST -->
	<a href="http://www.blinklist.com/index.php?Action=Blink/addblink.php&amp;Url=https://jawr.dev.java.net&amp;Title=JAWR%20-%20More%20than%20a%20javascript/css%20compressor" target="_blank"><img border="0" src="/images/badges/blinklist.png" alt="add to blinklist"/></a>  
	
	<!-- DIGG -->
	<a href="http://digg.com/submit?phase=2&amp;url=https://jawr.dev.java.net&amp;title=JAWR%20-%20More%20than%20a%20javascript/css%20compressor" target="_blank"><img border="0" src="/images/badges/digg.png" alt="add to digg"/></a>  
	
	<!-- GOOGLE -->
	<a href="http://www.google.com/bookmarks/mark?op=edit&amp;output=popup&amp;bkmk=https://jawr.dev.java.net&amp;title=JAWR%20-%20More%20than%20a%20javascript/css%20compressor" target="_blank"><img border="0" src="/images/badges/google.png" alt="add to google"/></a>  
	
	<!-- STUMBLEUPON -->
	<a href="http://www.stumbleupon.com/submit?url=https://jawr.dev.java.net&amp;title=JAWR%20-%20More%20than%20a%20javascript/css%20compressor" target="_blank"><img border="0" src="/images/badges/stumbleupon.png" alt="add to stumbleupon"/></a>  
	
	<!-- YAHOO -->
	<a href="http://myweb.yahoo.com/myresults/bookmarklet?t=JAWR%20-%20More%20than%20a%20javascript/css%20compressor&amp;u=https://jawr.dev.java.net&amp;ei=UTF" target="_blank"><img border="0" src="/images/badges/yahoo.png" alt="add to yahoo"/></a> 

	</div>
		
	<div id="firstPara">	
	
	
	
	<p>Jawr is a tunable packaging solution for Javascript and CSS which allows for rapid development of resources in separate module files. 
	Developers can work with a large set of split javascript files in development mode, then Jawr bundles all together into one or several files 
	in a configurable way. 
	<br/>By using a tag library, Jawr allows you to use the same, unchanged pages for development and production. 
	Jawr also minifies and compresses the files, resulting in reduced page load times. 
	<br/>Jawr is configured using a simple .properties descriptor, and aside of standard java web applications it can also be used with 
	<a href="https://facelets.dev.java.net/">Facelets</a> and <a href="http://grails.org/">Grails</a> applications.   
	</p>
	</div>
  	
  	<img src="./images/index/jawr.png" />
	<p>
	It is common knowledge that it is faster to serve one large file rather than two smaller ones, because of increased HTTP negotiation and the fact 
	that most browsers only keep two connections open to the same host at any given time. 
	Jawr will reduce the number of requests needed to load a page and the amount of data to transfer to clients, achieving drastic improvement of 
	loading times. With a simple configuration file, resources can be distributed in bundles to best suit the usage pattern for a site. 
	Files not added to bundles also benefit from minification and compression (if no bundles are declared, Jawr will work as an easy to configure
	resources compressor). 
	</p>	
	<p>
	A JSP tag library (Facelets also supported) is used to import the resources to pages. In development mode, the tags generate &lt;script&gt; and &lt;style&gt; links for each resource 
	mapped to a bundle.
	In production mode, the tags generate a single link pointing to the bundle file. Thus, there is no need to change code in pages when switching 
	from development to production mode. 
	</p>	
	<p>
	There is an increasing trend towards richer client interfaces with complex javascript implementations. Using Jawr will ease the development process 
	by allowing to distribute modules in separate files without worrying about how the application will be served to clients. 
	</p>	
	<p>
		The alternatives to using Jawr are: 
		<ul>
			<li>Developing all-in-one script files which conform to the deployment scheme. That is, cram all the modules into a few files. Version control becomes
			unmanageable and it is hard to find a component that needs change. As the project grows, the code becomes near to impossible to mantain. 
			</li>
			<li>Use a build script to join and compress the files, which forces developers to build and redeploy the whole application for testing  even the 
				slightest of changes in their code. 
				</li>
		</ul>
	</p>
	<p>
		Jawr offers the best of both worlds, by combining a powerful bundling-minifying-compressing scheme for optimal service in 
		production, with a rapid development mode for quick change-save-test cycles. 
	</p>
	<p>
		You can download the latest release of Jawr 
		<a href="https://jawr.dev.java.net/servlets/ProjectDocumentList?folderID=8543">here</a>. Also, check out the 
		<a href="./tutorials/quickstart.html">quick start tutorial</a> to see how easy it is to use Jawr in your project. 
		<br/>And don't forget to check the <a href="./tutorials/faq_howto.html">FAQ - Howto page</a> for tips and troubleshooting. 
	</p>
	
	
      <subsection name="Features">
		<ul>
			
			<li> <strong>Free and open source</strong>: Released under an Apache 2.0 license, Jawr can be used free of charge with or 
			without modifications, for both commercial and noncommercial purposes.</li> 
			
			<li> <strong>Easy to setup</strong>: All you need to start using Jawr is to declare a couple of servlets in you deployment descriptor, create a simple .properties configuration file, 
			and use the Jawr tag library to import css and javascript resources to your pages. A complete setup takes a matter of minutes and requires little or no modifications over time. </li> 
			
			<li> <strong>Lightweight</strong>: Bundling and compression is done once at server startup so there is no overhead to requests. Also, a cache component
			is available and enabled by default to serve resources directly from memory instead of from the filesystem.</li> 
			
			
			<li> <strong>Built-in minification and postprocessing</strong>: Jawr includes JSMin and the YUI compressor, both from Yahoo!. A custom minificator for 
			CSS is also included, although the YUI compressor can be used for CSS too. For each bundle, a customizable postprocessing chain is executed 
			during startup. Relative URLs in CSS files are rewritten by a postprocessor so they keep working with a different relative path. It is also 
			easy to create custom postprocessors to perform any modifications to your js and css files at deploy time. 
			 <a href="./docs/postprocessors.html" > Learn more</a>. 
			</li> 
			
			<li><strong>Third party frameworks integration</strong>: Jawr can be used with 
				<a href="./integration/dwr.html">DWR</a>, 
				<a href="./integration/spring.html">Spring</a>, JSF, 
				<a href="./integration/facelets.html">Facelets</a>, 
				<a href="./integration/wicket.html">Wicket</a>, 
				<a href="./integration/validator.html">Commons Validator (with Struts)</a>, 
				 and <a href="./integration/grails.html">Grails.</a>  
				 It can also be easily plugged <a href="./integration/augmenter.html">into your own infrastructure. </a> 
			</li>			
		</ul>
		<p>There are many more features, check the <a href="./features.html">features list page</a> for a full listing. </p>
      </subsection>
      <subsection name="Requirements">
      	<p>
      		You can use Jawr with any compliant Java Servlet 2.3 or higher container implementation (i.e. Tomcat, Jetty, BEA Weblogic etc.), as long as the 
			virtual machine it runs on is 1.4 or higher. Jawr uses Apache log4j for logging messages, so it is a required library. There are no other requirements, 
			although if your JVM version is 1.4, you can improve performance by using the backport-util-concurrent library, which can be found at: 
			<a href="http://backport-jsr166.sourceforge.net/">http://backport-jsr166.sourceforge.net</a>. However, this is completely optional and Jawr will work 
			just fine if you choose not to use it.  
      	</p>
      </subsection>
      <subsection name="Announcements">
      <p>Here are the latest announcements regarding Jawr. You can find older version announcements with all the features that have been 
      added over time at the <a href="./changes.html">change log.</a> </p>
      <ul>
	      <li> <strong>06/27/2009</strong>: Version 3.3 released:<br/>
	      	This version contains a lot of new features and bug fixes.<br/><br/>
	      	<strong>New features: </strong>
	    	<ul>
      		 <li>
      		 	One of the big new features of this release is the ability to define variant bundles.
      		 	A variant bundle is the generalization of what already exists for the locale aware bundle.
      		 	A variant bundle is a bundle which can change depending on some defined criteria.
      		 	This means for example that you can define a specific bundle content by browser type. You can define a specific bundle for IE, and for the same bundle sent another content to Firefox, Chrome, Opera...
      		 	For more information about the variant bundle, please check the following <a href="./docs/variant_bundle.html">variant bundle documentation</a> for more detail.
      		 </li>
      		 <li>
      		 	One of the feature derived from the use of variant bundle is the support for CSS bundle skin.
      		 	Jawr allows you to define CSS bundle, where the skin variant will be sent back to the user depending on the skin
      		 	used by the user. The user skin is defined in a cookie.
      		 	The good news is that the CSS skin can also be combined with the user locale, which means that Jawr is able to
      		 	sent to the user the CSS bundle depending on the user skin and also depending on the user locale.
      			For more information about how to use the new skin feature, please check the following <a href="./tutorials/howToUseJawrCssSkin.html">Jawr skin documentation</a> for more detail.
      		 </li>
      		 <li>
      		 	The Jawr CSS tag has been updated to be able to generate title and alternate attributes for CSS bundles.
      		 	The Jawr CSS tag has also been updated to be able to generate alternate for CSS skin bundles.
      		 	Look for the CSS tag at the <a href="./docs/taglibs.html">tag library doc</a> for extra info.
      		 </li>
      		 <li>
      		 	The Jawr skin swicther javascript generator has been created to generate the javascript file for the skin switcher.
      		 	You can take a look to the <a href="./docs/generators.html">generators documentation</a> for more info.
      		 </li>
      		 <li>
      		 	Jawr now supports base64 image encoding.<br/>
      		 	Jawr is now able to generate base64 encoded image in your CSS bundle using a new postprocessor.<br/>
      		 	Please check the tutorial on <a href="./tutorials/howToUseJawrToGenerateBase64Image.html">how to use Jawr to generate base64 image in CSS bundle</a> for more detail.
      		 	<br/>
      		 	The Jawr image tags have been updated to be able to generate base64 encoded image. 
      		 	Please check the documentation on the <a href="./docs/taglibs.html">taglib description</a> for more detail.
      		 </li>
      		 <li>
      		 	Jawr supports hashcode bundle generator. This means that you can now define your own implementation of the id used to identify the bundle.(Ex: application version based, ...) 
      		 	For more detail, about how to implement your own hashcode bundle generator, take a look at the documentation about <a href="./docs/hashcodeBundleGenerator.html">hashcode bundle generator</a>.
      		 </li>
      		 <li>
      		 	Jawr provides also an MD5 hashcode bundle generator, which use MD5 to create the bundle hashcode. Take a look at the documentation about <a href="./docs/hashcodeBundleGenerator.html">hashcode bundle generator</a>.
      		 </li>
      		 <li>
      		 	Jawr introduces the <b>strict mode</b>. For earlier version, Jawr didn't take in account the hashcode of the requested bundle.<br/>
      		 	This means that if a user request a bundle, for which the hashcode is different from the current one, Jawr will sent back the current bundle.<br/>
      		 	This may be an issue if you are using an application on a clustered environment. If you deploy a new version of your application on one server,
      		 	while the other is still up. You can face cases where the user request a page on one server, and try to retrieve the web resource bundles one another.<br/>
      		 	This may lead to strange behaviors.<br/>
      		 	To overcome this issue, Jawr introduces the <b>strict mode</b>. In this mode, Jawr will allow you to define how you want to handle such requests by defining your own <b>IllegalBundleRequestHandler</b>.
      		 	Jawr also provides a default implementation whch returns a "404" if it receive a such request.  
      		 	Take a look at the documentation about <a href="./docs/illegalBundleRequestHandler.html">strict mode and illegal bundle request handler</a>.
      		 	Jawr provides just a default implementation, if you want to contribute and share your own implementation with the community,
      		 	feel free to create and attach a patch in the issue tracker. 
      		 </li>
      		 <li>
      		 	Jawr uses now alphabetical ordering for bundle resources by default.
      		 </li>
      		 <li>
      		 	Jawr supports media keyword in CSS Import PostProcessor. Please check the <a href="./docs/postprocessors.html">CSS import postprocessor documentation</a> for more detail.
      		 </li>
      		  <li>
      		 	Jawr introduce a new postprocessor to combine CSS media. Please check the <a href="./docs/postprocessors.html">CSS combine media postprocessor documentation</a> for more detail.
      		 	Thanks to Gerben Jorna for the implementation of this feature.
      		 </li>
      		</ul>
      		<strong>Fixed issues: </strong>
	    	 <ul>   
	    	 	 <li>
	      		 	<strong>Issue #41 fixed:</strong> Add title attribute to style tag      
	      		 </li>      
	      		 <li>
	      		 	<strong>Issue #127 fixed:</strong> Problem parsing jawr-jsp2x.tld in Resin      
	      		 </li>
	      		 <li>
	      		 	<strong>Issue #132 fixed:</strong> CSS image URL not written properly for generators which don't handle CSS images      
	      		 </li>
	      		 <li>
	      		 	<strong>Issue #133 fixed:</strong> Issue on Jawr context management for debug mode and JMX in the JawrSpringController
	      		 </li>
	      		 <li>
	      		 	<strong>Issue #134 fixed:</strong> In debug mode, Jawr generates wrong CSS image paths for generated Css resources when using JawrSpringController      
	      		 </li>
	      		 <li>
	      		 	<strong>Issue #139 fixed:</strong> Jawr don't handle *.ico files as image files      
	      		 </li>
	      		 <li>
	      		 	<strong>Issue #141 fixed:</strong> Issue on Jawr CssMinifier which doesn't handle properly CSS rules with linefeed inside      
	      		 </li>
	      		 <li>
	      		 	<strong>Issue #144 fixed:</strong> NPE when using jawr.debug.ie.force.css.bundle=true and ieonly.condition bundle property.      
	      		 </li>     
	      		 <li>
	      		 	<strong>Issue #145 fixed:</strong> Jawr not compatible with Java 1.4.      
	      		 </li>     
	      		 <li>
	      		 	<strong>Issue #146 fixed:</strong> ThreadLocal memory leak when reloading application.
	      		 </li>   
	      		 <li>
	      		 	<strong>Issue #151 fixed:</strong> The Wicket image tag rendering is not working properly for HTML images      
	      		 </li>     
	      		 <li>
	      		 	<strong>Issue #152 fixed:</strong> For the image tags in Wicket, Jawr doesn't handle properly the URL generation of generated images
	      		 </li>     
	      		 Thanks to eliotsykes, mkkoch, wangg3, Martin Jönsson, jnichols959 and all those who participate through the discusion forum for reporting issues and giving feedbacks. <br/>
	      		 Thanks also to Gerben Jorna for his implementation of the combine media post processor and for the base implementation of the base64 CSS image postprocessor. 
	      	</ul>
	      	<br/><br/>
	      	<strong>Jawr ant task and maven plugin</strong> - Version 1.4 released:<br/>
		    This version contains one new feature and one bug fix.<br/><br/>
		    <strong>New feature: </strong>
	    	 <ul>    	 	
	      		 <li>
	      		 For IE6 and IE7 CSS bundles which use the new <b>base64ImageEncoder</b>, the bundle processor generates a placeholder for the web application URL.
	      		 Please take a look to the following <a href="./tutorials/howToUseJawrToGenerateBase64Image.html">documentation</a> for more detail.   
	      		 </li>      
	      	</ul> 
      	  	<strong>Fixed issue: </strong>
	    	 <ul>    	 	
	      		 <li>
	      		 	<strong>Issue #142 fixed:</strong> Add support to generate exact path mapping for Jawr bundle processor .      
	      		 </li>      
	      	</ul> 
      	  	<br/><br/>
      	  	<strong>Jawr Grails plugin</strong> - Version 3.3 released:<br/>
		    We are happy to finally provide to the Grails community the latest Jawr Grails plugin, which is fully compatible with all the new features of the Jawr 3.3 version.
		    We also would like to apologize for the discontinuation of the plugin release.<br/>
		    We are sorry for the inconvenience made to the Grails users, which where not able to use Jawr.
		    We hope that you will enjoy this new version with all the latest features of Jawr.<br/>
		    The Grails plugin 3.3 is available <a href="https://jawr.dev.java.net/servlets/ProjectDocumentList?folderID=12287&expandFolder=12287&folderID=12287">here</a>. <br/>
		    It will be soon available at the grails plugin repository. 
		    <br/><br/>
		    <strong>New feature: </strong>
	    	 <ul>    	 	
	      		 <li>
	      		 Compatible with Grails version > 1.2.1   
	      		 </li>
	      		 <li>
	      		 Fully compatible with Jawr 3.3.
	      		 </li>
	      	</ul> 
      	  	<strong>Fixed issues: </strong>
	    	 <ul>
	    	 	 <li>
	    	 	 	<strong>Issue #68 fixed :</strong> jawr.config.reload.refreshKey fails on the Grails plugin
	    	 	 </li>
	    	 	 <li>
	      		 	<strong>Issue #130 fixed:</strong> In develpment Since Grails 1.2, Jawr can't reference pluing resources	 	
	      		 </li>      
	      		 <li>
	      		 	<strong>Issue #148 fixed:</strong> Since grails 1.2, Jawr is not able to generate i18n messages
	      		 </li>      
	      		 <li>
	      		 	<strong>Issue #149 fixed:</strong> Since grails 1.2, Jawr is not able to generate i18n messages
	      		 </li>      
	      	</ul> 
      	  	<br/><br/>
      	  	The following Jawr sample applications have been updated. You can have a look to them to see how to integrate the latest features :
      	  		<ul>
      	  			<li>basicwebapp</li>
      	  			<li>spring sample</li>
      	  			<li>wicket sample</li>
      	  			<li>grails sample</li>
      	  		</ul>	 
      	  	You can retrieve them from the SVN repository : <b>https://jawr.dev.java.net/svn/jawr/trunk jawr/samples/</b>  
      	  	<br/>
      	  	<br/>
      	  	<strong>Important note :</strong><br/>
			It is important to notice that this version will be the last version which supports Java 1.4.
	      	The next major release will target Java 5.<br/><br/>
	      	
	      	Thanks to all of you who contributed and provided feedback in the discussion forum.<br/>
			There still a lot to do. So any contribution is more than welcome.<br/>
			If you want to be part of the Jawr project, don't hesitate, join us. 
     	  </li>
      	  <li> <strong>02/01/2009</strong>: Version 3.2.1 released:<br/>
	      	This version contains mainly bug fixes.<br/><br/>
	      	<strong>New feature: </strong>
	    	<ul>
      		 <li>
      		 For spring MVC projects, Jawr now allows you to use simultaneously <strong>configuration</strong> and <strong>configLocation</strong> properties.
      		 The values found in the configuration file at <strong>configLocation</strong> will be overrided by the properties defined in <strong>configuration</strong>.<br/>
      		 The <strong>configuration</strong> property is no more deprecated.
      		 Thanks to sfrancois99 and szeller for their feedbacks.<br/>
      		 Please check the documentation on the <a href="./integration/spring.html">Spring MVC integration</a> for more detail.
      		 </li>
      		</ul>
      		<strong>Fixed issues: </strong>
	    	 <ul>    	 	
	      		 <li>
	      		 	<strong>Issue #81 fixed:</strong> <strong>jawr.[type].factory.dirmapper.excluded</strong> property doesn't work.      
	      		 </li>      
	      		 <li>
	      		 	<strong>Issue #113 fixed:</strong> In spring MVC, when using only configuration property an exception is thrown.      
	      		 </li>
	      		 <li>
	      		 	<strong>Issue #115 fixed:</strong> Css image sprite generation doesn't work for generated CSS resource.      
	      		 </li>       
	      		 <li>
	      		 	<strong>Issue #118 fixed:</strong> Image Streaming throws exception if the browser closes the stream      
	      		 </li>       
	      		 <li>
	      		 	<strong>Issue #123 fixed:</strong> Images are not handled property with JawrSpringController.      
	      		 </li>       
	      		 <li>
	      		 	<strong>Issue #124 fixed:</strong> The property "factory.use.orphans.mapper" is never taken in account. To be compliant with the Jawr properties naming convention,
	      		 	this property has been renamed to <strong>jawr.factory.use.orphans.mapper</strong>. Please check <a href="./docs/descriptor_syntax.html">descriptor syntax doc</a> for more detail.   
	      		 </li>       
	      		 <li>
	      		 	<strong>Issue #125 fixed:</strong> In Spring MVC, an exception is thrown when the controller mapping is defined while the Spring servlet mapping is set to "/*".   
	      		 </li>    
	      		 Thanks to qxo, mahoney266 and Robin Sander for reporting issues.
	      	</ul>
	      	<br/><br/>
	      	<strong>Jawr ant task and maven plugin</strong> - Version 1.3 released:<br/>
		    This version contains only one bug fix.<br/><br/>
		    <strong>Fixed issue: </strong>
	    	 <ul>    	 	
	      		 <li>
	      		 	<strong>Issue #116 fixed:</strong> Jawr bundle processing with the maven plugin or ant Task doesn't work with a spring MVC project. Please check the <a href="./docs/bundle_preprocessing.html">bundle preprocessing documentation</a> for more detail.      
	      		 </li>      
	      		 Thanks to acklenx for reporting the issue. 
      	  	</ul> 
     	  </li>
      	  <li> <strong>12/09/2009</strong>: Version 3.2 released:<br/>
	      	A serious security issue has been found in Jawr when using the property <strong>jawr.debug.overrideKey</strong>, which allowed a user to access the content of the WEB-INF folder, and any file of your web application
	      	if the user finds the value of the property <strong>jawr.debug.overrideKey</strong>, which is defined your configuration file. <br/>
	      	This issue is fixed in this new version. <br/>
	      	<br/>
	      	We highly recommend you to switch to this new version or at least to remove this property from your configuration file if you want to stay with a previous version.
	      	The recommended way to switch your current session from production to debug, is to use the JMX feature of Jawr. Please check the <a href="./docs/jmx_support.html">JMX documentation</a> for more detail.
	      	<br/>
	      	For those, who have created their own resource generator, we recommend them to look at the security issue section of the <a href="./docs/generators.html">generator documentation</a><br/><br/>
	      	<strong>New features/ fixed issues: </strong>
	    	<ul>
      		 <li>
      		 Jawr supports the generation of CSS image sprites. Jawr uses <a href="http://csssprites.org/">smartsprites</a> for the sprite generation.
      		 Thanks to Stanislaw Osinski, smartsprites creator, for his help on the integration of Jawr with smartsprites.<br/>
      		 Please check the tutorial on the <a href="./tutorials/jawrSpriteImage.html">image sprite generation with Jawr</a> for more detail.
      		 </li>
      		 <li>
      		 Jawr now provides a new property named <strong>dependencies</strong>, which allows the user to define the dependencies for a bundle.
      		 Thanks to kgray for the original idea.<br/>
      		 Please check <a href="./docs/custom_bundles.html">the bundle definition document</a> for more detail.
      		 </li>
      		 <li>
      		 Jawr now provides support for Wicket, thanks to a patch submitted by Robert Kopaczewski.<br/>
      		 Please check <a href="./integration/wicket.html">the Wicket integration document</a> for more detail.
      		 </li>
      		 <li>
      		 The generator API has been enhanced. Now you can create image generators, locale aware generators and generators, which support directory mapping. 
      		 Please check <a href="./docs/advanced_generators.html">the advanced generators document</a> for more detail.
      		 </li>
      		 <li>
      		 Jawr provides an new API for <strong>global preprocessor</strong>. The global preprocessors are executed before the standard resource bundling and post processing.
      		 Please check <a href="./docs/global_preprocessors.html">the global preprocessor document</a> for more detail.
      		 </li>
      		 <li>
      		 Jawr has introduced a new feature to overcome in <strong>debug mode</strong> the IE limitation, which can only handle 30 stylesheets in one page.<br/>
      		 This is particularly usefull for user which have CSS bundles in one page, containing more than 30 stylesheets.    
      		 The new property <strong>jawr.debug.ie.force.css.bundle</strong> has been added for this purpose.
      		 If you set this value to true,  in debug mode with an IE browser, Jawr will reference each CSS bundle as a unique CSS resource, instead of referencing all the resources of the bundle. 
      		 Please check <a href="./docs/descriptor_syntax.html">descriptor syntax doc</a> for more detail.
      		 </li>
      		 <li>
      		 The property <strong>jawr.css.image.classpath.use.servlet</strong> has been renamed to <strong>jawr.css.classpath.handle.image</strong>.  
      		 So the use of <strong>jawr.css.image.classpath.use.servlet</strong> in your configuration file is deprecated. Use the property <strong>jawr.css.classpath.handle.image</strong> instead.
      		 Please check <a href="./docs/descriptor_syntax.html">descriptor syntax doc</a> for more detail.
      		 </li>
      		</ul>
      		 <br/><br/>
	    	<strong>Fixed issues: </strong>
	    	 <ul>    	 	
	      		 <li>
	      		 	<strong>Issue #98 fixed:</strong> Input image tag produces <b>&lt;input type="image" disabled="false"&gt;</b> which disables the button.      
	      		 </li>      
	      		 <li>
	      		 	<strong>Issue #105 fixed:</strong> css @charset declarations must be filtered out for CSS bundle.      
	      		 </li>
	      		 <li>
	      		 	<strong>Issue #107 fixed:</strong> NullPointerException when using JAWR in JSR-168 context.      
	      		 </li>       
	      		 <li>
	      		 	<strong>Issue #108 fixed:</strong> No check for duplicate rendering of bundles using an alternate production URL.      
	      		 </li>       
	      		 <li>
	      		 	<strong>Issue #109 fixed:</strong> Unnecessary bundling process for bundle using alternate production URL.      
	      		 </li>       
	      		 <li>
	      		 	<strong>Issue #110 fixed:</strong> Image content length is set after the response has been sent.      
	      		 </li>       
	      		 <li>
	      		 	<strong>Issue #111 fixed:</strong> Able to view files under web-inf directory.      
	      		 </li>       
	      		 <li>
	      		 	<strong>Issue #112 fixed:</strong> <strong>jawr.config.reload.interval</strong>, <strong>jawr.config.reload.refreshKey</strong> don't work for Jawr with Spring MVC.      
	      		 </li>       
	      		 Thanks to rodneyphillips, axelfont, tkaefer and chupa for reporting issues. 
      	  	</ul>
      	  </li>
	      <li> <strong>09/28/2009</strong>: Version 3.1.2 released:<br/>
	      	This version contains only bug fixes.<br/><br/>
	    	<strong>Fixed issues: </strong>
	    	 <ul>    	 	
	      		 <li>
	      		 	<strong>Issue #93 fixed:</strong> Localized messages generation only generates default locale when using message generator parameters.      
	      		 </li>      
	      		 <li>
	      		 	<strong>Issue #95 fixed:</strong> CSS classpath generated resources contain postprocessors data in debug mode.      
	      		 </li>      
	      		 Thanks to jmundt for reporting localized messages issue. 
      	  	</ul>
      	  	<br/><br/>
      	  	<strong>Jawr ant task and maven plugin</strong> - Version 1.1.2 released:<br/>
	    	This version contains only one bug fix.<br/><br/>
	    	<strong>Fixed issue: </strong>
	    	 <ul>    	 	
	      		 <li>
	      		 	<strong>Issue #96 fixed:</strong> Remove entity resolution when using bundle preprocessor.      
	      		 </li>      
	      		 Thanks to acklenx for reporting the issue. 
      	  	</ul>
	      </li>
	      <li> <strong>09/01/2009</strong>: Version 3.1.1 released:<br/>
	      	This version contains only bug fixes.<br/><br/>
	    	<strong>Fixed issues: </strong>
	    	 <ul>    	 	
	      		 <li>
	      		 	<strong>Issue #76 fixed:</strong> A Page should render resource bundle only once.      
	      		 </li>      
	      		 <li>
	      		 	<strong>Issue #89 fixed:</strong> Multiple invocations of a custom generator.      
	      		 </li>      
	      		 <li>
	      		 	<strong>Issue #90 fixed:</strong> RendererRequestUtils.setRequestDebuggable(...) creates http sessions.
	      		 </li>        
	      		 <li>
	      		 	<strong>Issue #91 fixed:</strong> Src of img tag does not support relative path and is incorrect when the requested page is not in the web application root directory.
	      		 </li>
	      		 <li>
	      		 	<strong>Issue #92 fixed:</strong> Jawr trips over Javascript multiline string literals
	      		 </li> 
	      		 We would like to thank qxo, jmundt, reardonm, cpo, kape and axelfont for reporting issues and providing patches when possible. 
      	  	</ul>
	    </li>
	    <li> <strong>08/10/2009</strong>: Version 3.1 released:<br/>
	      	This version contains mainly bug fixes.<br/><br/>
	    	<strong>New features/ fixed issues: </strong>
	    	 <ul>    	 	
	      		 <li>
	      		 	A new tag have been added to the tag library to generate the URL to an image which is handled by Jawr. Look for the image tags at the <a href="./docs/taglibs.html">tag library doc</a> for extra info.
	      		 </li>
	      		 <li>
	      		 	<strong>Issue #74 fixed:</strong> NoSuchElementException when bundle has no file. The issue occured when a bundle was defined with no mapping.      
	      		 </li>      
	      		 <li>
	      		 	<strong>Issue #75 fixed:</strong> NullPointerException when using JawrImgServlet and image does not exist.
	      		 </li>        
	      		 <li>
	      		 	<strong>Issue #79 fixed:</strong> NullPointerException while requesting a CSS in debug mode if no Jawr image servlet was defined.
	      		 </li>
	      		 <li>
	      		 	<strong>Issue #88 fixed:</strong> Incorrect logging of "The jawr bundle mapping 'jawr-img-mapping.properties' is not found"
	      		 </li> 
	      		 We would like to thank sfrancois99, qxo and nordicdevil for reporting issues and providing patches when possible. 
      	  	</ul>
	    </li>
	    <li> <strong>08/03/2009</strong>: Version 3.0 released:<br/>
	    	<strong>New features/ fixed issues: </strong>
	    	 <ul>    	 	
	      		 <li>
	      		 	Jawr is now able to handle images. This means that all images managed by Jawr will be cached in the browser as the other Javascript and CSS resources.
	      		 	By default all CSS images will be handled by Jawr if the Jawr image servlet is defined. 
	      		 	Look for the <em>Jawr image handling</em> section in the <a href="./docs/servlet.html">servlet docs</a> and at <em>jawr.image.resources</em> in the <a href="./docs/descriptor_syntax.html">descriptor syntax docs</a> for extra info.<br/>
	      		 	Two new tags have been added to the tag library to handle these images. Look for the image tags at the <a href="./docs/taglibs.html">tag library doc</a> for extra info.
	      		 </li>
	      		 <li>
	      		 	Jawr supports now JMX, which means that you will be able to modify at runtime the behaviour of Jawr using a JMX console.
	      		 	For example, you will be able to pass from production mode to debug mode an entire application or only one session at runtime.
	      		 	Look at the <a href="./docs/jmx_support.html">JMX support doc</a> for extra info.
	      		 </li>
	      		 <li>
	      			A new "bundle preprocessing" feature has been added in Jawr. This feature is also known as "build time bundle processing".
	      			This feature allows the user to skip the bundling process at server start-up, and use instead the data of preprocessed bundles. 
	      			Look at the <a href="./docs/bundle_preprocessing.html">bundle preprocessing documentation</a> for extra info.
	      			<br/>
	      			This feature is a new one, it can certainly be improved. So please don't hesitate to give your feedback on the Discussion Forum, on this feature and on Jawr in general.    
	      		 </li>
	      		 <li>
	      		 	We have also created a <strong>maven plugin</strong> and an <strong>Ant task</strong> to integrate the new bundle preprocessing feature in the project build phase.  
	      		 	Look at the <a href="./docs/jawr_ant_task.html">Jawr Ant task docs</a> and the <a href="./docs/jawr_maven_plugin.html">Jawr maven plugin docs</a> for extra info.<br/>
	      		 	Thanks to Andreas Andreou for the original idea of the maven plugin.    
	      		 </li>
	      		 <li>
	      		 	We have also decided to provide a better support to usage of CDN in Jawr. <br/>
	      		 	The new property <em>jawr.url.contextpath.ssl.override</em> allows you to define what the CDN URL to use for HTTPS requests is. <br/>
	      		 	In debug mode, it is now possible to reference the debug resource files deployed on the CDN. To enable this feature, you will have to set to true, the property 
	      		 	<em>jawr.url.contextpath.override.used.in.debug.mode</em>. <br/>
	      		 	Look for these properties in the <a href="./docs/descriptor_syntax.html">descriptor syntax docs</a> for extra info.    
	      		 </li>
	      		 <li>
	      		 	The property <em>jawr.css.imagepath.override</em> which defined the override path for CSS images has been removed.
	      		 	Now for CSS images, Jawr generates URLs which are relative to the CSS bundle even if the resource is deployed on a CDN. 
	      		 	Look at the <em>jawr.css.imagepath.override</em> section at the <a href="./docs/bundle_preprocessing.html">bundle preprocessing doc</a> for extra info.    
	      		 </li>
	      		 <li>
	      		 	For a better support of CDN, Jawr provides resources which can be integrated more easily in CDN. These files are generated using the bundle preprocessing feature. 
	      		 	It even provides a rewrite configuration file for Apache server.
	      		 	Look at the <em>CDN support</em> section at the <a href="./docs/bundle_preprocessing.html">bundle preprocessing doc</a> for extra info.    
	      		 </li>
	      		 <li>
	      		 	Jawr is now able to discover automatically the locales available for message resources.
	      		 	So the use of the bundle property <em>jawr.js.bundle.[name].locales</em> is no more necessary.
	      		 	Look for <em>jawr.js.bundle.[name].locales</em> at <a href="./docs/descriptor_syntax.html">descriptor syntax doc</a> for extra info.    
	      		 </li>
	      		 <li>
	      		 	<strong>Issue #69 fixed:</strong> CSS from jar file fails when using jawr.debug.overrideKey in production, is now fixed.      
	      		 </li>      
	      		 <li>
	      		 	<strong>Issue #66 fixed:</strong> Add support for @import keyword in CSS is now fixed. You can use the new <strong>cssimport</strong> post processor to resolve the CSS import. Please take a look at the section <em>CSS Import resolver</em> at <a href="./docs/postprocessors.html">postprocessors documentation</a> for more info.
	      		 </li>        
	      		 <li>
	      		 	<strong>Issue #72 fixed:</strong> Avoid skipping repeated members of bundles in debug mode which is fixed now.
	      		 	Before when the same resources was referenced twice in debug mode, the second one was skipped.        
	      		 </li>
	      		 <li>
	      		 	<strong>Issue #73 fixed:</strong> java.lang.IndexOutOfBoundsException in CSSMinifier is fixed now.
	      		 	The issue occured when the CSS file contains a '$' character in a non commented section. 
	      		 </li>  
	      	</ul>
	    </li>  
      	<li> <strong>5/31/2009</strong>: Version 2.8 released:<br/>
    	<strong>New features/ fixed issues: </strong>
    	 <ul>    	 	
      		 <li>
      		 	While until now it has been possible to load CSS from the classpath, images referenced in them would not be resolved. Now the 
      		 	Jawr servlet can be used to serve images from the classpath as well, thus enabling fully the ability to serve styles and related
      		 	images from jar files.  Look for <em>jawr.css.image.classpath.use.servlet</em> at the  
      		 	<a href="./docs/servlet.html">servlet docs</a> for extra info.    
      		 </li>
      		 <li>
      		 	The classpath resource generator now allows to use the <em>jar:</em> prefix to map css (it used to be <em>jar_css:</em> for
      		 	css, now the syntax is the same for both js and css files).   
      		 </li>
      		 <li>
      			It is possible to request debug debug mode for a page in production mode. The purpose is to be able to have a javascript 
      			debugging session in a deployed application. The bundle members will be requested sepparately as if Jawr were in debug mode 
      			easing debug operations without having to redeploy. This is done by adding a special request parameter which is defined in 
      			configuration.  Look for <em>jawr.debug.overrideKey</em> at the  
				<a href="./docs/modes.html">debug and production modes documentation</a> for extra info.    
      		 </li>
      		 <li>
      		 	A new way to force a refresh of all bundles has been added. A secret parameter name is defined in configuration using the key 
      		 	<strong>jawr.config.reload.refreshKey</strong>, and whenever a request that matches the Jawr servlet includes it, the configuration
      		 	wil be reloaded.  Look for <em>jawr.config.reload.refreshKey</em> at the  
				<a href="./docs/servlet.html">servlet docs</a> for extra info.    
      		 </li>
      		 <li>
      		 	Orphans search and auto bundle generation can now be disabled for convenience using a new configuration parameter named 
      		 	<strong>factory.use.orphans.mapper</strong>. It is on by default but when set to false orphans will no longer be searched for.     
      		 </li>
      		 <li>
      		 	Bundles can now be defined with an alternate static URL to use in production mode. This is useful for instance to use publicly 
      		 	served libraries (e.g. the YUI framework) while still using locally served files in development mode.  Details can be found at
      		 	at the <a href="./docs/custom_bundles.html">bundle definition documentation</a>, check out the <em>productionURL</em> param.         
      		 </li>     
      		 <li>
      		 	<strong>Issue #60 fixed:</strong> Per-file custom postprocessor were not being added to the postprocessing chain. Thanks 
      		 	to user ebottard for providing a patch to solve the issue.      
      		 </li>      
      		 <li>
      		 	<strong>Issue #61 fixed:</strong> The URL path rewriting postprocessor for CSS files was corrupting data: scheme image URLs which 
      		 	is now fixed. Thanks to user Tim Kingman for providing a patch to solve the issue.      
      		 </li>        
      		 <li>
      		 	<strong>Issue #63 fixed:</strong> The 'jawr.custom.postprocessors.names' property is no longer required. Instead, Jawr will 
      		 	detect all 'jawr.custom.postprocessors.[name_of_the_postprocessor].class' declarations to define postprocessors.       
      		 </li>         
      		 <li>
      		 	<strong>Issue #65 fixed:</strong> There was a file leak when using the jawr.config.reload.interval parameter because of a 
      		 	non closed FileInputStream. Fixed.       
      		 </li>            
      		 <li>
      		 	<strong>Issue #67 fixed:</strong> It was not possible to use more than one custom postprocessor per chain due to a bug which 
      		 	is now fixed.        
      		 </li>     		 
      	</ul>
      	This release includes features and fixes by a new commiter, <strong>Ibrahim Chaehoi</strong>, who had already submitted patches 
      	for previous releases and decided to join the project. And indeed he has taken it seriously since most of the changes for this version 
      	are his work. Cheers to our new member! 
    </li>
      	<li> <strong>2/13/2009</strong>: Version 2.7 released:<br/> 
      		<strong>New features/ fixed issues: </strong>
      		 <ul>
      		 <li>
      		 EL expressions in tag libraries are now supported on older servlet containers, thanks to a patch 
      		 submitted by Ibrahim Chaehoi. 
      		 </li>
      		 <li>
      		 The jawr.*.bundle.names property is now deprecated, also thanks to a patch submitted by Ibrahim Chaehoi. 
      		 <strong>You may remove all jawr.js.bundle.names and jawr.css.bundle.names from your descriptors</strong>. 
      		 You can still use them if you feel more comfortable that way. 
      		 </li>
      		 <li>
      		 Jawr now supports jawr.url.contextpath.override that begin with: //.  This is a protocol relative url 
      		 structure. It's handy when you are sharing your css and/or js with different domains and protocols.  
      		 So these // urls will work relative to http and https. 
      		 </li>
      		 <li>
      		 Added jawr.css.imagepath.override property to allow for css url replacement that supports absolute URLs or 
      		 really anything you would like prepended to the URL.  This is usefull if you are sharing your css 
      		 across multiple domains and use background images.
      		 </li>
      		 <li>
      		 Classloading has been improved to better support the 18n messages generator, which failed to load 
      		 properties files under certain conditions. 
      		 </li>
      		 <li>
      		 Fixed issue 49 (with no jawr.csslinks.flavor setting, style tags are ended with 'null')
      		 </li>
      		 <li>
      		 Fixed issue 56 (incorrect path management in Spring MVC controller )
      		 </li>
				</ul>
	      This release includes code from our new commiter, <strong>Matt Ruby</strong>. Welcome aboard!. Also, as noted 
	      above, <strong>Ibrahim Chaehoi</strong> submitted a couple of high quality patches that were included in the 
	      release. Thanks a lot Ibrahim! 
	      </li>
      	<li> <strong>11/23/2008</strong>: Version 2.6 released:<br/> 
      		<strong>New features/ fixed issues: </strong>
      		 <ul><li> <strong>Spring MVC support added. </strong> Jawr now provides a Spring MVC Controller so it can now be fully configured 
      		 through Spring's configuration mechanism. See <a href="./integration/spring.html" >the manual page</a> for details. </li>
      		 <li>The way LINK tags are rendered can now be configured. Specifically, depending on the content type you choose for your 
      		 pages, you may need the link tags to be closed differently, or even not closed at all. By default, tags will be closed as 
      		 usual (i.e. with '/&gt;'). But adding a new parameter to the properties configuration will make this behavior change. 
      		 Check the <a href="./docs/taglibs.html" > taglib documentation</a> and look for 'jawr.csslinks.flavor' for details.  </li>
      		 <li>A new generator has been added. Now CSS resources can be retrieved from the classpath by using the 
      		 <strong>jar_css</strong> prefix. </li>
      		 <li>[Issue #46] The jawr[css|js].bundle.names property is now augmentable when using ConfigPropertiesAugmenter, 
      		 as it should have from the start. </li>      		 
      		 <li>[Unregistered Issue] Jawr does not close the outputstream nor the output writers handed by the servlet container, since 
      		 that's an illegal operation, as was pointed out by user Lance. </li>      		
			</ul>
      	</li>
      </ul>
      </subsection>
      

    </section>
  </body>

</document>
