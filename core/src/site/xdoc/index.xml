<document>

  <properties>
    <title>More than a Javascript/CSS compressor</title>
  </properties>
	
	<head>
		<style>
			h2{display:none}
			#firstPara{
				clear:right;
				margin-top:100px
			}
			#mainJawrLogo {
				border:0 !important;
				margin:auto 0 auto;
				float:left;
			}
			#jawrlinks {
				float:right;
				width:45%;
				text-align:right;
				margin-right:-20px;
			}
			#jawrlinks img {
				margin-bottom:10px;
			}
			#badges{
				float:right;
				clear:right;
			}
			#badges img  { border:0 !important;}
		</style>
	</head>
	
  <body>
	
    <section>
	
	<img src="./images/index/logo.png" style="border:0 !important" id="mainJawrLogo"  />
	
	<div id="jawrlinks">
		<a href="https://jawr.dev.java.net/servlets/ProjectDocumentList?folderID=8543">
			<img src="./images/index/download.png" style="border:0 !important" title="Download the latest version of Jawr"  /></a> 
		<a href="https://jawr.dev.java.net/tutorials/quickstart.html" >
			<img src="./images/index/get-started.png" style="border:0 !important" title="Go to the quickstart tutorial and start using Jawr" /></a> 		
	</div>
	<div id="badges">
		<!-- FURL -->
	<a href="http://www.furl.net/storeIt.jsp?t=JAWR%20-%20More%20than%20a%20javascript/css%20compressor&amp;u=https://jawr.dev.java.net" target="_blank"><img border="0" src="/images/badges/furl.png" alt="add to furl"/></a>  
	
	<!-- DEL.ICIO.US -->
	<a href="http://del.icio.us/post?v=4&amp;noui&amp;jump=close&amp;url=https://jawr.dev.java.net&amp;title=JAWR%20-%20More%20than%20a%20javascript/css%20compressor" target="_blank"><img border="0" src="/images/badges/delicious.png" alt="add to del.icio.us"/></a>  
	
	<!-- TECHNORATI -->
	<a href="http://technorati.com/faves?add=https://jawr.dev.java.net" target="_blank"><img border="0" src="/images/badges/technorati.png" alt="add to technorati"/></a>  
	
	<!-- BLINKLIST -->
	<a href="http://www.blinklist.com/index.php?Action=Blink/addblink.php&amp;Url=https://jawr.dev.java.net&amp;Title=JAWR%20-%20More%20than%20a%20javascript/css%20compressor" target="_blank"><img border="0" src="/images/badges/blinklist.png" alt="add to blinklist"/></a>  
	
	<!-- DIGG -->
	<a href="http://digg.com/submit?phase=2&amp;url=https://jawr.dev.java.net&amp;title=JAWR%20-%20More%20than%20a%20javascript/css%20compressor" target="_blank"><img border="0" src="/images/badges/digg.png" alt="add to digg"/></a>  
	
	<!-- GOOGLE -->
	<a href="http://www.google.com/bookmarks/mark?op=edit&amp;output=popup&amp;bkmk=https://jawr.dev.java.net&amp;title=JAWR%20-%20More%20than%20a%20javascript/css%20compressor" target="_blank"><img border="0" src="/images/badges/google.png" alt="add to google"/></a>  
	
	<!-- STUMBLEUPON -->
	<a href="http://www.stumbleupon.com/submit?url=https://jawr.dev.java.net&amp;title=JAWR%20-%20More%20than%20a%20javascript/css%20compressor" target="_blank"><img border="0" src="/images/badges/stumbleupon.png" alt="add to stumbleupon"/></a>  
	
	<!-- YAHOO -->
	<a href="http://myweb.yahoo.com/myresults/bookmarklet?t=JAWR%20-%20More%20than%20a%20javascript/css%20compressor&amp;u=https://jawr.dev.java.net&amp;ei=UTF" target="_blank"><img border="0" src="/images/badges/yahoo.png" alt="add to yahoo"/></a> 

	</div>
		
	<div id="firstPara">	
	
	
	
	<p>Jawr is a tunable packaging solution for Javascript and CSS which allows for rapid development of resources in separate module files. 
	Developers can work with a large set of split javascript files in development mode, then Jawr bundles all together into one or several files 
	in a configurable way. 
	<br/>By using a tag library, Jawr allows you to use the same, unchanged pages for development and production. 
	Jawr also minifies and compresses the files, resulting in reduced page load times. 
	<br/>Jawr is configured using a simple .properties descriptor, and aside of standard java web applications it can also be used with 
	<a href="https://facelets.dev.java.net/">Facelets</a> and <a href="http://grails.org/">Grails</a> applications.   
	</p>
	</div>
  	
  	<img src="./images/index/jawr.png" />
	<p>
	It is common knowledge that it is faster to serve one large file rather than two smaller ones, because of increased HTTP negotiation and the fact 
	that most browsers only keep two connections open to the same host at any given time. 
	Jawr will reduce the number of requests needed to load a page and the amount of data to transfer to clients, achieving drastic improvement of 
	loading times. With a simple configuration file, resources can be distributed in bundles to best suit the usage pattern for a site. 
	Files not added to bundles also benefit from minification and compression (if no bundles are declared, Jawr will work as an easy to configure
	resources compressor). 
	</p>	
	<p>
	A JSP tag library (Facelets also supported) is used to import the resources to pages. In development mode, the tags generate &lt;script&gt; and &lt;style&gt; links for each resource 
	mapped to a bundle.
	In production mode, the tags generate a single link pointing to the bundle file. Thus, there is no need to change code in pages when switching 
	from development to production mode. 
	</p>	
	<p>
	There is an increasing trend towards richer client interfaces with complex javascript implementations. Using Jawr will ease the development process 
	by allowing to distribute modules in separate files without worrying about how the application will be served to clients. 
	</p>	
	<p>
		The alternatives to using Jawr are: 
		<ul>
			<li>Developing all-in-one script files which conform to the deployment scheme. That is, cram all the modules into a few files. Version control becomes
			unmanageable and it is hard to find a component that needs change. As the project grows, the code becomes near to impossible to mantain. 
			</li>
			<li>Use a build script to join and compress the files, which forces developers to build and redeploy the whole application for testing  even the 
				slightest of changes in their code. 
				</li>
		</ul>
	</p>
	<p>
		Jawr offers the best of both worlds, by combining a powerful bundling-minifying-compressing scheme for optimal service in 
		production, with a rapid development mode for quick change-save-test cycles. 
	</p>
	<p>
		You can download the latest release of Jawr 
		<a href="https://jawr.dev.java.net/servlets/ProjectDocumentList?folderID=8543">here</a>. Also, check out the 
		<a href="./tutorials/quickstart.html">quick start tutorial</a> to see how easy it is to use Jawr in your project. 
		<br/>And don't forget to check the <a href="./tutorials/faq_howto.html">FAQ - Howto page</a> for tips and troubleshooting. 
	</p>
	
	
      <subsection name="Features">
		<ul>
			
			<li> <strong>Free and open source</strong>: Released under an Apache 2.0 license, Jawr can be used free of charge with or 
			without modifications, for both commercial and noncommercial purposes.</li> 
			
			<li> <strong>Easy to setup</strong>: All you need to start using Jawr is to declare a couple of servlets in you deployment descriptor, create a simple .properties configuration file, 
			and use the Jawr tag library to import css and javascript resources to your pages. A complete setup takes a matter of minutes and requires little or no modifications over time. </li> 
			
			<li> <strong>Lightweight</strong>: Bundling and compression is done once at server startup so there is no overhead to requests. Also, a cache component
			is available and enabled by default to serve resources directly from memory instead of from the filesystem.</li> 
			
			
			<li> <strong>Built-in minification and postprocessing</strong>: Jawr includes JSMin and the YUI compressor, both from Yahoo!. A custom minificator for 
			CSS is also included, although the YUI compressor can be used for CSS too. For each bundle, a customizable postprocessing chain is executed 
			during startup. Relative URLs in CSS files are rewritten by a postprocessor so they keep working with a different relative path. It is also 
			easy to create custom postprocessors to perform any modifications to your js and css files at deploy time. 
			 <a href="./docs/postprocessors.html" > Learn more</a>. 
			</li> 
			
			<li> <strong>Proxy-friendly gzip support</strong>: For each bundle there are two URLs that point to a gzipped and a regular version of the resource. Since the URLs 
			are be generated within a JSP, the request headers are analyzed to decide if the browser will support gzipping and the appropiate URL is written out. 
			With this system, caching proxies will not be a problem since it works around known Internet Explorer problems with the VARY header.</li> 
			
			
			<li> <strong>Caching enforcement</strong>: Jawr will try its best to force your clients to cache the resources. If a browser asks if a file changed, a 304 (not modified) 
			header is sent back with no content. On the other hand, with Jawr you will be 100% sure that new versions of your bundles are downloaded by all 
			clients. Every URL to your resources will include an automatically generated, content-based prefix that changes automatically whenever a 
			resurce is updated. Once you deploy a new version, the URL to the bundle will change as well so it will be impossible that a client uses an 
			older, cached version.</li> 
			
			
			<li> <strong>Flexible bundling scheme</strong>: Choose which files go into which bundle, and in which order. Choose wether you want a bundle minified or not. 
			Choose wether a bundle will be used only in development mode (for adding things such as console loggers). Create partially minified bundles. 
			Create bundles which are automatically added within an Internet Explorer conditional comment.  
			All with a very easy to use configuration system. 
			 <a href="./docs/custom_bundles.html" > Learn more</a>. </li> 
			
			<li> <strong>CDN compatible</strong>: Jawr can be used easily with a CDN for even better response times.</li> 
			
			
			<li> <strong>Global bundles</strong>: Some bundles such as libraries will be needed anywhere in your site where there is javascript code. Same goes for base CSS 
			stylesheets. With Jawr, these will be added to pages automatically so you don't need to repeat the same import statement everywhere.</li> 
			
			<li> <strong>Dynamic pages not required</strong>: Jawr can be used in plain HTML pages, so even if your application uses a mix of HTML and JSP (or other template based dynamic 
			technology), Jawr can be used on every page. 
			 <a href="./docs/plain_html.html" > Learn more</a>. </li> 
			
			<li> <strong>JSF/Facelets support</strong>: If you are using JSF with Facelets as the view technology, you can still use Jawr using a specific tag library.
			 <a href="./integration/facelets.html" > Learn more</a>. </li> 
			
			<li> <strong>Grails plugin</strong>: Jawr can be used seamlessly in Grails applications, using a provided plugin that includes a GSP tag library.
			<a href="./integration/grails.html" > Learn more</a>. </li> 
		
			<li> <strong>DWR integration</strong>: You can use DWR and have Jawr handle the serving of the static and dynamic scripts DWR generates, with the 
					added feature of being able to bundle them together and with other scripts from your application. 
					<a href="./integration/dwr.html" > Learn more</a>.</li> 
		
			<li> <strong>Struts/Commons Validator integration</strong>: finally you can minify and compress the validation scripts generated by this framework. 
						With Jawr you can also bundle the Validator static javascript with other scripts in your application.
						<a href="./integration/validator.html" > Learn more</a>.</li> 
					
			<li> <strong>Library friendly</strong>: Open source javascript libraries can be used seamlessly with Jawr. Most of these are modular or have plugins: add the modules or 
			plugins you need and bundle all together. And, even if you minify them (thus eliminating comments), you can still keep the mandatory licenses in
			the bundle. The <a href="https://jawr.dev.java.net/tutorials/quickstart.html">libraries tutorial</a> will show you how to integrate popular js libraries such 
			as Protoype, JQuery or YUI. </li>
		</ul>
      </subsection>
      <subsection name="Requirements">
      	<p>
      		You can use Jawr with any compliant Java Servlet 2.3 or higher container implementation (i.e. Tomcat, Jetty, BEA Weblogic etc.), as long as the 
			virtual machine it runs on is 1.4 or higher. Jawr uses Apache log4j for logging messages, so it is a required library. There are no other requirements, 
			although if your JVM version is 1.4, you can improve performance by using the backport-util-concurrent library, which can be found at: 
			<a href="http://backport-jsr166.sourceforge.net/">http://backport-jsr166.sourceforge.net</a>. However, this is completely optional and Jawr will work 
			just fine if you choose not to use it.  
      	</p>
      </subsection>
      <subsection name="Announcements">
      <ul>
      	<li> <strong>10/6/2008</strong>: Version 2.5 released:<br/> 
      		<strong>New features: </strong>
      		 <ul><li>CDN support: Jawr can be used with a CDN by setting the 'jawr.url.contextpath.override' parameter to an absolute URL. </li>
      		 <li><a href="./docs/generators.html" >Generators API</a>: you can now write components that dynamically generate scripts or 
      		 CSS during the application startup. </li>
      		 <li>Ability to read config the file from the filesystem: instead of reading only from the classpath, the config properties file 
      		 can now be read from the filesystem. To do it the config parameter must be prefixed with file:, followed by the absolute file path. </li>      		 
      		 <li><a href="./integration/augmenter.html" >Multiple configuration sources</a> can be used when integrating Jawr with other frameworks.</li>
      		 </ul>
      		<strong>Fixed issues:</strong>
      		<ul><li>#31:media="print" ignored when useRandomParam="false" </li>
      		 <li>#29:Contextpath override does not work with absolute URLs (see CDN support above)</li>
      		 <li>#19:PropsFilePropertiesSource.configChanged() doesn't work on Tomcat (now properties can be read from the filesystem)</li>
      		 <li>Also, a new version of the DWR 3 has been published, fixing the latest incompatibilities. </li></ul>
      	</li>   
      	<li> <strong>7/7/2008</strong>: Version 2.4.2 released:<br/> 
      	A performance improvement has been added: buffering is now used when using writers. Thanks to Richie for submitting a patch. <br/>
      	There was a bug causing CSS URLs to be broken when using the static pages resource includer, which is now fixed. 
      	</li>   
      	<li> <strong>6/16/2008</strong>: Version 2.4.1 released:<br/> 
      	A bug was introduced in the last release which kept DWR 2 from working with Jawr. This release fixes that bug. <br/>
      	Also, a new interface has been added which ConfigPropertiesSource custom implementations can use to get access to the servlet 
      	context. The class is named net.jawr.web.resource.bundle.factory.util.ServletContextAware. 
      	
      	</li>      
      	<li> <strong>6/16/2008</strong>: Version 2.4 released:<br/> 
      	<strong>Jawr can be used in plain HTML pages</strong>: This has been a major drawback for Jawr, since many times applications are a mix of 
      	static HTML and dynamic pages. <a href="./docs/plain_html.html" > Click here to find out how this has been solved. </a>     
      	</li>      
      	<li> <strong>6/9/2008</strong>: Version 2.3 released:<br/> <strong>Commons Validator integration</strong>: Users of Struts and other libraries 
      	supporting the Commons Validator can now have the static and dynamic scripts added to bundles, minified and compressed with Jawr.  
      	<br/><strong>DWR 3 support: </strong> Jawr now supports the upcoming version 3 of the DWR framework. 
      	<br/>	
      		Locale bundles can now be used as part of composite bundles. 
      	<br/>				      	
				Several bugs were fixed: 
				<ul><li> Grails i18n messages encoding fix. </li>
				
				<li> i18n messages replacement was not working properly. </li>
				
				<li> i18n bug in mappings (parameters were parsed incorrectly). </li>
				
				<li> Bug with 'dwr:_**' mapping in debug mode. </li></ul>
      	</li>
      	<li> <strong>6/2/2008</strong>: Version 2.2 released:<br/> <strong>DWR integration</strong>: DWR users can now leverage the new integration with Jawr, 
      	which allows bundling all DWR resources along with other static scripts. <br/>
      	<strong>Mapping of classpath resources: </strong> bundles can now map to  resources (javascript and CSS) which are available in the classpath. 
      	<br/>				      	
				Also, several bugs were fixed: 
				<ul><li> bug in i18n message generation: was failing when a dollar sign was found in a message. </li>
				
				<li> bug for i18n messages: in debug mode, would get 404s if the mapping was not set to attend *.js requests. </li>
				
				<li> bug in CSS link rewriter, which failed when Jawr mapping had several subdomains. </li>
				
				<li> Decreased logging verbosity of the ConcurrentCollectionsFactory. </li></ul>
      	</li>

      	<li> <strong>5/19/2008</strong>: Version 2.1 released: <strong>i18n messages mapping from java ResourceBundles to javascript:</strong> 
      	your internationalized messages that you keep in properties files can be easily converted into a script that allows for easy access to 
      	every message and supports variable substitution. According tho the user's locale, the script generated will correspond to his language.   
      	<br/>Other than that, mostly internal changes and bugfixes. The internal changes include a new system to 
      	map to Generators. These are java components which generate javascript/CSS, or read it from a different place than the usual WAR directories.
      	This opens interesting possibilities for the near future. 
      	</li>
      	<li> <strong>4/5/2008</strong>: Version 2.0 released: new automatic prefixing system, conditional comments support, grails and facelets 
      	plugins, YUI compressor... Check the <a href="./docs/changes_20.html" >what's new in 2.0 page</a> for a description of all the new features and fixes.    
      	</li>
      	
		
      </ul>
      </subsection>
      

    </section>
  </body>

</document>
