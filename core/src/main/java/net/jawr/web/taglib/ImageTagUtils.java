/**
 * Copyright 2009 Ibrahim Chaehoi
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 * 
 * 	http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
package net.jawr.web.taglib;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.PageContext;

import net.jawr.web.JawrConstant;
import net.jawr.web.config.JawrConfig;
import net.jawr.web.exception.ResourceNotFoundException;
import net.jawr.web.resource.ImageResourcesHandler;
import net.jawr.web.resource.bundle.CheckSumUtils;
import net.jawr.web.resource.bundle.factory.util.PathNormalizer;
import net.jawr.web.servlet.RendererRequestUtils;

import org.apache.log4j.Logger;

/**
 * Utility class for image tags.
 * 
 * @author ibrahim Chaehoi
 */
public final class ImageTagUtils {

	/** The logger */
	private static final Logger LOGGER = Logger.getLogger(ImageTagUtils.class);
	
	/**
	 * Returns the image URL generated by Jawr from a source image path
	 * @param imgSrc the source image path
     * @param imgRsHandler the image resource handler
	 * @param request the request
	 * @param response the response
	 * @return the image URL generated by Jawr from a source image path
	 */
	public static String getImageUrl(String imgSrc, ImageResourcesHandler imgRsHandler, HttpServletRequest request, HttpServletResponse response) {
		
		if(imgRsHandler == null){
			throw new IllegalStateException("You are using a Jawr image tag while the Jawr Image servlet has not been initialized. Initialization of Jawr Image servlet either failed or never occurred.");
		}
	
		String contextPath = request.getContextPath();
		
		String finalImgSrc = imgSrc;
		// relative path
		if(!imgRsHandler.getJawrConfig().getGeneratorRegistry().isGeneratedImage(finalImgSrc) && !finalImgSrc.startsWith("/")){ 
			finalImgSrc = PathNormalizer.concatWebPath(request.getRequestURI(), finalImgSrc);
			int idx = finalImgSrc.indexOf(contextPath);
			if(idx > -1){
				finalImgSrc = finalImgSrc.substring(idx+contextPath.length());
			}
		}
		
		String newUrl = getImageUrl(finalImgSrc, imgRsHandler, request,
				contextPath);
		
		return response.encodeURL(newUrl);
	}

	/**
	 * Sames as its counterpart, only meant to be used as a JSP EL function. 
	 * @param imgSrc The image path
	 * @param pageContext the page context
	 * @return
	 * @throws JspException
	 */
	public static String getImageUrl(String imgSrc, PageContext pageContext) throws JspException {
		ImageResourcesHandler imgRsHandler = 
			(ImageResourcesHandler) pageContext.getServletContext().getAttribute(JawrConstant.IMG_CONTEXT_ATTRIBUTE);
		if (null == imgRsHandler)
			throw new JspException(
					"You are using a Jawr image tag while the Jawr Image servlet has not been initialized. Initialization of Jawr Image servlet either failed or never occurred.");

		HttpServletResponse response = (HttpServletResponse) pageContext
		.getResponse();

		HttpServletRequest request = (HttpServletRequest) pageContext
				.getRequest();
		
		return getImageUrl(imgSrc, imgRsHandler,request,response);
		
	}
	
	/**
	 * Returns the image URL
	 * @param imgSrc the image path
	 * @param imgRsHandler the image resource handler
	 * @param request the request
	 * @param contextPath the context path
	 * @return the image URL
	 */
	private static String getImageUrl(String finalImgSrc,
			ImageResourcesHandler imgRsHandler, HttpServletRequest request,
			String contextPath) {
		String newUrl = (String) imgRsHandler.getCacheUrl(finalImgSrc);
		
        JawrConfig jawrConfig = imgRsHandler.getJawrConfig();
		if(newUrl == null){
        	try {
				newUrl = CheckSumUtils.getCacheBustedUrl(finalImgSrc, imgRsHandler.getRsReaderHandler(), jawrConfig);
				imgRsHandler.addMapping(finalImgSrc, newUrl);
        	} catch (IOException e) {
	    		LOGGER.info("Unable to create the checksum for the image '"+finalImgSrc+"' while generating image tag.");
			} catch (ResourceNotFoundException e) {
				LOGGER.info("Unable to find the image '"+finalImgSrc+"' while generating image tag.");
			}
    	}
        
        if(newUrl == null){
        	newUrl = finalImgSrc;
        }
        
        String imageServletMapping = jawrConfig.getServletMapping();
		if("".equals(imageServletMapping)){
			if(newUrl.startsWith("/")){
				newUrl = newUrl.substring(1);
			}
		}else{
			newUrl = PathNormalizer.joinDomainToPath(imageServletMapping, newUrl);
		}
		
		boolean sslRequest = RendererRequestUtils.isSslRequest(request);
		
		newUrl = RendererRequestUtils.getRenderedUrl(newUrl, jawrConfig, contextPath, sslRequest);
		return newUrl;
	}

}
