																		------
                                    Postprocessors
                                    ------
                                    ------
                                    ------

Jawr Postprocessors

	Postprocessors are filters that Jawr applies to resources and bundles during startup. These filters provide such things as minification (removal of 
	unneeded whitespace and comments), URL rewriting, and the like. There are two types: file and bundle postprocessors. The file postprocessors are 
	applied to resources before adding them to the bundle. On the other hand, bundle postprocessors are applied to a whole bundle once all the files 
	have been joined into it. \ 
	
	Normally, you will not need to worry about postprocessors, since Jawr will use them automatically. But still, if you have special needs you can 
	configure which postprocessors to use. Also, in the future more of them will be added to Jawr, adding for example integration with the YUI 
	compressor. For configuration purposes, every postprocessor has a unique name key, which you use in a comma-separated property in the descriptor, 
	for instance: 

+------------------------------------------+
	jawr.js.bundle.factory.bundlepostprocessors=JSMin, license
		
	jawr.css.bundle.factory.bundlepostprocessors=cssminify, license
	jawr.css.bundle.factory.filepostprocessors=csspathrewriter
+------------------------------------------+
	
	As you see, we specify a couple of bundle posprocessors for both js and css resources, plus a file postprocessor for css files. We didn't specify 
	any file postprocessor for javascript because, at the time of writing, there is none available yet. \ 
	Note that the previous example configuration matches the default behavior os Jawr, so it actually makes no difference wether you include it in your 
	descriptor or not. You would set these parameters only to change the default behavior, like for example, to remove minification:  
	
+------------------------------------------+
	jawr.js.bundle.factory.bundlepostprocessors=license		
	jawr.css.bundle.factory.bundlepostprocessors=license
+------------------------------------------+
	
	Optionally, you may specify a different set of postprocessors for any given bundle, so you can mix and match different schemes within your 
	application. In order to do that, you specify similar attributes for a particular bundle: 
	
+------------------------------------------+

	jawr.js.bundle.foo.bundlepostprocessors=license
	jawr.js.bundle.foo.fileprocessors=none
	
+------------------------------------------+

	In this example, the bundle postprocessor for the <foo> bundle is set to <license>, meaning no minification will occur. And for the file-by-file
	postprocessor, it is specified that none will be used. 
	

*	All-around postprocessors

** Licenses includer
	
	* <<Type>>: Bundle
	
	* <<Properties Key>>: license
	
	[]
	
	The licenses includer will add the content of .license files at the top of a bundle. That way you will be able to add open source mandatory licenses 
	or any other comment to the top of your resources. Check the {{{./license_files.html}license files page}} for more info. 

=====================
	Note that licenses are themselves code comments, so you should be careful to always use this processor after any minification or compression 
	processor has executed and not before. Otherwise, the license might be eliminated from the bundle right after it was inserted. 

=====================

*	Javascript-specific postprocessors

** JSMin
	
	* <<Type>>: Bundle
	
	* <<Properties Key>>: JSMin
	
	[]
	
	
	
	This processor uses {{{http://www.crockford.com/javascript/jsmin.html}Douglas Crockford's JSMin}}  minificator. It will remove any comments in code and unnecesary whitespace in a very safe manner.  


*	CSS-specific postprocessors

** CSS Minificator
	
	* <<Type>>: Bundle
	
	* <<Properties Key>>: cssminify
	
	[]
	
	This processor removes comments and unneeded whitespace using search and replace with regular expressions. 
		  

** CSS Path rewriter
	
	* <<Type>>: File
	
	* <<Properties Key>>: csspathrewriter
	
	[]
	
	This processor rewrites relative paths in URLs for each file that is added to a bundle. A bundle will have a different URL to that of its contained 
	resources, so in order for relative paths to image files and the like to keep working, URLs must be rewritten accordingly.  
	
